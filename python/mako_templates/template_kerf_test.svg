
<%page args="blockmargin_left, blockmargin_top"/>

<%! 
    import math 
    import os.path
    
    in2mm = 25.4
    def apply_hint_mm(val_mm, dpi=300):
      val_in = val_mm / in2mm
      return round(val_in*dpi)/dpi*in2mm

    halfinch=25.4/2
    
    blockid = "testkerf"
%>


<!-- Block of tags for testing kerf -->

## #### BLOCK TITLE ####

%if show_block_title:
    <%
    lefttit="Test kerf";

    tit_left=blockmargin_left
    tit_top=blockmargin_top
    %>
    <!-- Block title -->
    <g class="block_title" transform="translate(${tit_left},${tit_top})">
    <text text-anchor="start" dy="-1.5"
                  font-family="Helvetica" font-weight="bold" font-size="${block_fontsize}"
                  fill="#000000">${lefttit}</text>
    </g>
%endif

## #### DEFINITIONS ####

<!-- Definitions -->
<%
    print("In kerf_test.svg...")

    cx=tagsize_pix/2
    cy=tagsize_pix/2

    # Scaling:    
    # - SVG image assumed to have viewBox="0 0 72 72"
    img_viewbox = 72
    imgsc=tagsize_pix/img_viewbox
        
    # Outer border dimensions
    pix_left=tagmargin2_pix
    pix_top=tagmargin2_pix+idheight_pix
    
    arrowshift=0.7
    arrowwidth=0.7
    arrowlen=tagmargin2_pix-tagmargin1_pix
    
    # Complete tag with outer border
    tagwidth2_mm  = tagwidth2_pix*pix2mm
    tagheight2_mm = tagheight2_pix*pix2mm
    
    # Shift of tag top-left within cell
    dx=(step_x-tagwidth2_mm)/2
    dy=(step_y-tagheight2_mm)/2
    dx = apply_hint_mm(dx)
    dy = apply_hint_mm(dy)
    
%>
<defs>
  <g id="arrow_${blockid}">
      <path d="M 0,0 l -${arrowlen} -${arrowwidth} l 0 ${arrowwidth} Z" fill="${arrowcolor}" stroke="none"/>
<!--       <path d="M 0,0  l -${arrowlen} ${arrowwidth} l 0 -${arrowwidth*2} Z" fill="#red" stroke="none" transform="translate(-${arrowshift},0) scale(${(arrowlen-arrowshift)/arrowlen})"/> -->
  </g>
  <g id="arrow2_${blockid}">
      <path d="M 0,0 l -${arrowlen-1} ${arrowwidth} l 0 -${arrowwidth*2} Z" fill="${arrowcolor}" stroke="none"/>
<!--       <path d="M 0,0  l -${arrowlen-1} ${arrowwidth} l 0 -${arrowwidth*2} Z" fill="#red" stroke="none" transform="translate(-${arrowshift},0) scale(${(arrowlen-1-arrowshift)/(arrowlen-1)})"/> -->
  </g>
  <g id="bg_${blockid}">
      <g class="tagbg">
<!--         <rect x="-2" y="-3.5" width="12" height="13.5" rx="2" ry="2" fill="#888" stroke="none"/> -->
        <!-- Border2 rectangle -->
        <rect x="-${pix_left}" y="-${pix_top}" 
              width="${tagwidth2_pix}" height="${tagheight2_pix}" rx="${0}" ry="${0}" 
              fill="${border2color}" stroke="none"/>
        
        %if show_colored_corners:
        <!-- Title colored rectangle -->
        <rect x="-${tagmargin2_pix}" y="-${idheight_pix+tagmargin2_pix}" 
              width="${tagsize_pix+2*tagmargin2_pix}" height="${idheight_pix+tagmargin2_pix+tagsize_pix/2}"
              fill="${tagid_bgcolor}" stroke="none"/>
        <rect x="-${tagmargin2_pix}" y="${tagsize_pix/2}" 
              width="${tagsize_pix/2+tagmargin2_pix}" height="${tagsize_pix/2+tagmargin2_pix}"
              fill="${tagcornercolor1}" stroke="none"/>
        <rect x="${tagsize_pix/2}" y="${tagsize_pix/2}" 
              width="${tagsize_pix/2+tagmargin2_pix}" height="${tagsize_pix/2+tagmargin2_pix}"
              fill="${tagcornercolor2}" stroke="none"/>
        %endif
        
        %if show_arrows:
        <!-- White markers -->
        <!-- Left -->
        <use xlink:href="#arrow_${blockid}" transform="translate(-1,0)"/>        
        <use xlink:href="#arrow_${blockid}" transform="translate(-1,${tagsize_pix}) scale(1,-1)"/>
        <use xlink:href="#arrow2_${blockid}" transform="translate(-2,${cy})"/>
        
        <!-- Right -->
        <use xlink:href="#arrow_${blockid}" transform="translate(${tagsize_pix+1},0) scale(-1,1)"/>        
        <use xlink:href="#arrow_${blockid}" transform="translate(${tagsize_pix+1},${tagsize_pix}) scale(-1,-1)"/>
        <use xlink:href="#arrow2_${blockid}" transform="translate(${tagsize_pix+2},${cy}) scale(-1,1)"/>
        
        <!-- Bottom -->
        <use xlink:href="#arrow_${blockid}" transform="translate(0,${tagsize_pix+1}) rotate(-90)"/>        
        <use xlink:href="#arrow_${blockid}" transform="translate(${tagsize_pix},${tagsize_pix+1}) rotate(-90) scale(1,-1)"/>
        <use xlink:href="#arrow2_${blockid}" transform="translate(${cx},${tagsize_pix+2}) rotate(-90)"/>
        
        <!-- Top -->
        <use xlink:href="#arrow_${blockid}" transform="translate(${0},-${idheight_pix+tagmargin1_pix}) rotate(90) scale(1,-1)"/>
        <use xlink:href="#arrow2_${blockid}" transform="translate(${cx},-${idheight_pix+tagmargin1_pix+1}) rotate(90)"/>
        <use xlink:href="#arrow_${blockid}" transform="translate(${tagsize_pix},-${idheight_pix+tagmargin1_pix}) rotate(90)"/>
        %endif
        
        <!-- Border1 rectangle -->
        <rect x="-${tagmargin1_pix}" y="-${tagmargin1_pix}" 
              width="${tagsize1_pix}" height="${tagsize1_pix}" 
              rx="${tagmargin1_pix}" ry="${tagmargin1_pix}" 
              fill="${border1color}" stroke="none"/>
              
        <!-- Tag background rectangle -->
        <rect width="${tagsize_pix}" height="${tagsize_pix}" fill="${tagbgcolor}" stroke="none"/>
      </g>
  </g>
  
  <g id='cross_${blockid}'>
    %if show_crosses:
    <path d="M -1.5 0 L 1.5 0 M 0 -1.5 L 0 1.5" fill="none" stroke="${crosscolor}" stroke-width="0.04"/>
    %endif
    %if show_tag_cut:
    <path d="M -1 0 L 1 0 M 0 -1 L 0 1" fill="none" stroke="#0F0" stroke-width="0.03"/>
    %endif
  </g>
  
</defs>

<%
    # Note: at 10dpp, 200um=1pix wide
    #kerf_list = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
    kerf_list = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]
    opening_factor_list = [0, 1.5, 2, 2.5, 3]
  
    ntagsx = len(kerf_list)
    ntagsy = len(opening_factor_list)
    
    blocksize_x = ntagsx*step_x
    blocksize_y = ntagsy*step_y
%>

## #### TAG GRID ####

<%
  cross_margin = 25.4/4

  block_cross_x = blockmargin_left - blockmargin/2
  block_cross_y = blockmargin_top - blockmargin/2
%>
  <g transform="translate(${block_cross_x},${block_cross_y})">
    <use xlink:href="#cross_${blockid}"/>
  </g>
<%
  block_cross_x = blockmargin_left + blocksize_x + blockmargin/2
  block_cross_y = blockmargin_top - blockmargin/2
%>
  <g transform="translate(${block_cross_x},${block_cross_y})">
    <use xlink:href="#cross_${blockid}"/>
  </g>
<%
  block_cross_x = blockmargin_left + blocksize_x + blockmargin/2
  block_cross_y = blockmargin_top + blocksize_y + blockmargin/2
%>
  <g transform="translate(${block_cross_x},${block_cross_y})">
    <use xlink:href="#cross_${blockid}"/>
  </g>
<%
  block_cross_x = blockmargin_left - blockmargin/2
  block_cross_y = blockmargin_top + blocksize_y + blockmargin/2
%>
  <g transform="translate(${block_cross_x},${block_cross_y})">
    <use xlink:href="#cross_${blockid}"/>
  </g>
  
<%def name="cut(id, cut_left, cut_top, cut_width, cut_height, r, opening=0)">
  %if (opening==0):
    <g id="${id}">
      <rect x="${cut_left}" y="${cut_top}" width="${cut_width}" height="${cut_height}" 
            rx="${r}" ry="${r}" 
            fill="none" stroke="#0F0" stroke-width="${cutweight_pix}"/>
    </g> 
  %else:
    <g id="${id}">
      <path d="M ${cut_left+cut_width/2-opening/2},${cut_top} 
               
               L ${cut_left+r},${cut_top} 
               A ${r} ${r} 0  0 0  ${cut_left},${cut_top+r}
               
               L ${cut_left},${cut_top+cut_height-r} 
               A ${r} ${r} 0  0 0  ${cut_left+r},${cut_top+cut_height}
               
               L ${cut_left+cut_width-r},${cut_top+cut_height}
               A ${r} ${r} 0  0 0  ${cut_left+cut_width},${cut_top+cut_height-r}
               
               L ${cut_left+cut_width},${cut_top+r}
               A ${r} ${r} 0  0 0  ${cut_left+cut_width-r},${cut_top}
               
               L ${cut_left+cut_width/2+opening/2},${cut_top}" x="${cut_left}" y="${cut_top}" 
            fill="none" stroke="#0F0" stroke-width="${cutweight_pix}"/>
    </g>
  %endif
</%def>
<%def name="cutkerf(id, cut_left, cut_top, cut_width, cut_height, r, opening=0)">
  %if (opening==0):
         <g id="${id}">
            <rect x="${cut_left}" y="${cut_top}" width="${cut_width}" height="${cut_height}" 
                  rx="${r}" ry="${cut_radius}" 
                  fill="none" stroke="#FF0" stroke-opacity="0.5" stroke-width="${laserkerf_pix}"/>
          </g>
  %else:
   <g id="${id}">
      <path d="M ${cut_left+cut_width/2-opening/2},${cut_top} 
               
               L ${cut_left+r},${cut_top} 
               A ${r} ${r} 0  0 0  ${cut_left},${cut_top+r}
               
               L ${cut_left},${cut_top+cut_height-r} 
               A ${r} ${r} 0  0 0  ${cut_left+r},${cut_top+cut_height}
               
               L ${cut_left+cut_width-r},${cut_top+cut_height}
               A ${r} ${r} 0  0 0  ${cut_left+cut_width},${cut_top+cut_height-r}
               
               L ${cut_left+cut_width},${cut_top+r}
               A ${r} ${r} 0  0 0  ${cut_left+cut_width-r},${cut_top}
               
               L ${cut_left+cut_width/2+opening/2},${cut_top}" x="${cut_left}" y="${cut_top}" 
            fill="none" stroke="#FF0" stroke-opacity="0.5" stroke-width="${laserkerf_pix}" stroke-linecap="round"/>
    </g>
  %endif
</%def>
  

%for iy in range(0,ntagsy):
  %for ix in range(0,ntagsx):
    
    <%
    id=ix+ntagsx*iy
    
    laserkerf_mm = kerf_list[ix]
    laserkerf_pix=laserkerf_mm/pix2mm
    cutmargin_pix = laserkerf_pix/2
    
    cut_opening_factor = opening_factor_list[iy]
    
    cut_left=-tagmargin1_pix-cutmargin_pix
    cut_top=-tagmargin1_pix-cutmargin_pix-idheight_pix
    cut_width=tagsize1_pix+2*cutmargin_pix
    cut_height=tagsize1_pix+2*cutmargin_pix+idheight_pix
    cut_radius=tagmargin1_pix+cutmargin_pix
    cut_opening_pix=cut_opening_factor*laserkerf_pix
    if (cut_opening_pix>cut_width-2*cut_radius):  # Avoid opening larger than reasonable
         cut_opening_pix=cut_width-2*cut_radius
  
    # Cell origin
    x=blockmargin_left+ix*step_x
    y=blockmargin_top+iy*step_y
    
    x = apply_hint_mm(x)
    y = apply_hint_mm(y)

    imname = reltagdir +"/"+ tagfiles.format(family=family,id=first_id)
    absimname = abstagdir +"/"+ tagfiles.format(family=family,id=first_id)
    
    if (not os.path.isfile(absimname)):
        print("Error: Input tag image file {} not found".format(absimname))
    %>
    
    <!-- Tag ${id} -->
    
    <g class="tagcell" transform="translate(${x},${y})">
      %if show_tag_cell:
      <rect x="0" y="0" width="${step_x}" height="${step_y}" fill="none" stroke="yellow" 
            stroke-width="0.05"/>
      %endif
    
      <g id="tag${id}" 
         transform="translate(${dx},${dy}) scale(${pix2mm},${pix2mm}) translate(${pix_left},${pix_top})">

        %if show_tag:
        <use xlink:href="#bg_${blockid}"/>
        <text class="tagvalue" x="${cx}" y="-${tagmargin1_pix}" text-anchor="middle" 
              font-family="${fontfamily}" font-weight="bolder" font-size="${fontsize_id}" 
              fill="${textcolor}">${laserkerf_mm}</text>

        <text class="tagvalue" x="${cx}" y="-${tagmargin1_pix+tagmargin/2}" text-anchor="middle" 
              font-family="${fontfamily}" font-weight="bolder" font-size="${fontsize_id*2}" 
              fill="black">${laserkerf_mm},${cut_opening_factor}</text>
    
        %if show_tag_img:
        <use transform="scale(${imgsc},${imgsc})" xlink:href="${imname}#top"></use>
        %endif

        %endif

        %if show_tag_cutkerf:
        ${cutkerf("cut_kerf"+blockid, cut_left, cut_top, cut_width, cut_height, cut_radius, cut_opening_pix)}
        %endif
        %if show_tag_cut:
          ${cut("cut_"+blockid, cut_left, cut_top, cut_width, cut_height, cut_radius, cut_opening_pix)}
        %endif
      </g> <!-- Tag -->
    
    </g>  <!-- Tag cell -->
                       
  % endfor
% endfor

